/*
  Created by: Fei Song
  File Name: tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;

:};
   

/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal ELSE, IF, WHILE, INT, VOID, RETURN, BOOL;
terminal PLUS, MINUS, TIMES, OVER, LT, LE, GT, GE, EQ, NE, NOT, OR, AND, ASSIGN, SEMI, COMMA, UMINUS;
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal String ID, NUM, TRUTH;
terminal ERROR;

non terminal DecList program, decList;
non terminal Dec dec, funPrototype;
non terminal VarDec varDeclaration, param;
non terminal FunctionDec funDeclaration;
non terminal NameTy typeSpecifier;
non terminal VarDecList params, paramList, localDeclarations;
non terminal ExpList argList, args, statementList;
non terminal Exp expression, compoundStatement, expressionStatement, iterationStatement, selectionStatement, statement, returnStatement;
non terminal Var var;

precedence nonassoc AND, OR;
precedence nonassoc LT, GT, LE, GE, NE, EQ;
precedence left PLUS, MINUS;
precedence left TIMES, OVER;
precedence left UMINUS, NOT;
precedence left COMMA;
precedence left ELSE,SEMI,ID;
/* ----------------------------Grammar Section-------------------- */

start with program;

// Program is the start variable 
program ::= decList:dl
            {: RESULT = dl; :}
          ;

// DecList obtains instances of declaration
decList ::= decList:dl dec:d
            {: DecList t = dl;
               while ( t.tail != null )
                  t = t.tail;
               t.tail = new DecList(d, null);
               RESULT = dl;
            :}
          | dec:d
            {: RESULT = new DecList(d, null); :}
          ;

dec ::= varDeclaration:vd
         {: RESULT = vd; :}
      | funDeclaration:fd
      | funPrototype:fp
      ;

varDeclaration ::= typeSpecifier:ts ID:id SEMI
                     {: RESULT = new SimpleDec(tsleft, tsright, ts, id); :}
                 | typeSpecifier:ts ID:id LBRACKET NUM:n RBRACKET SEMI
                     {: RESULT = new ArrayDec(tsleft, tsright, ts, id); :}
                 ;

typeSpecifier ::= BOOL:b
                | INT:i
                  {: RESULT = new NameTy(ileft, iright, NameTy.INT); :}
                | VOID:v
                ;

funDeclaration ::= typeSpecifier:ts ID:id LPAREN params:ps RPAREN compoundStatement:cs
                 ;

funPrototype ::= typeSpecifier:ts ID:id LPAREN params:ps RPAREN SEMI
               ;

params ::= paramList:pl
         | VOID
         ;

paramList ::= paramList:pl COMMA param:p
            | param:p
            ;

param ::= typeSpecifier:ts ID:id
        | typeSpecifier:ts ID:id LBRACKET RBRACKET
        ;

compoundStatement ::= LBRACE localDeclarations:ld statementList:sl RBRACE
                    ;

localDeclarations ::= localDeclarations:ld varDeclaration:vd
                    ;

statementList ::= statementList:sl statement:s
                |  statement:s
                ;

statement ::= expressionStatement:es
            | compoundStatement:cs
            | selectionStatement:ss
            | iterationStatement:is
            | returnStatement:rs
            ;

expressionStatement ::= expression:e SEMI
                      | SEMI
                      ;

selectionStatement  ::= IF:i LPAREN expression:e RPAREN statement:s
                      | IF:i LPAREN expression:e RPAREN statement:m ELSE statement:u
                      ;

iterationStatement ::= WHILE:w LPAREN expression:e RPAREN statement:s
                     ;

returnStatement ::= RETURN:r expression:e SEMI
                  | RETURN:r SEMI
                  ;

expression ::= var:v ASSIGN expression:e
            | expression:e1 PLUS expression:e2
            | expression:e1 MINUS expression:e2
            | expression:e1 TIMES expression:e2
            | expression:e1 OVER expression:e2
            | expression:e1 EQ expression:e2
            | expression:e1 NE expression:e2
            | expression:e1 LT expression:e2
            | expression:e1 LE expression:e2
            | expression:e1 GT expression:e2
            | expression:e1 GE expression:e2
            | NOT:n expression:e
            | expression:e1 AND expression:e2
            | expression:e1 OR expression:e2
            | MINUS:m expression:e
            | LPAREN expression:e RPAREN
            | var:v
            | ID:id args:a
            | NUM:n
            | TRUTH:t
            ;

var ::= ID:id
      | ID:id LBRACKET expression:e RBRACKET
      ;

args ::= argList:al
       ;

argList ::= argList:al COMMA expression:e
          | expression:e
          ;

