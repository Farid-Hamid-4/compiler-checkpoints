/*
  Created by: Fei Song
  File Name: tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal IF, ELSE, WHILE, INT, VOID, BOOL, RETURN;
terminal PLUS, MINUS, MUL, DIV, LT, LE, GT, GE, EQ, NE, NOT, TILDA, OR, AND, ASSIGN, SEMI, COMMA;
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal String ID, NUM, TRUTH;
terminal ERROR;


non terminal Exp program;
non terminal ExpList declarationList, paramList, localDeclarations, statementList, oboolExpression, aboolExpression, additiveExpression, term, argList;
non terminal Exp declaration, varDeclaration, typeSpecifier, funDeclaration, funPrototype, params, param, compoundStatement, statement, expressionStatement, selectionStatement, iterationStatement, returnStatement, expression, var, uboolExpression, simpleExpression, relop, addop, mulop, signedFactor, factor, call, args;

precedence right EQ;
precedence nonassoc LT, GT, LE, GE, NE;
precedence left PLUS, MINUS;
precedence left MUL, DIV;

/* ----------------------------Grammar Section-------------------- */

start with program;

program ::= decList:dl
            {: RESULT = dl; :}
          ;

decList ::= decList:dl dec:d
            {: DecList t = dl;
               while ( t.tail != null )
                  t = t.tail;
               t.tail = new DecList(d, null);
               RESULT = dl;
            :}
          | dec:d
            {: RESULT = new DecList(d, null); :}
          ;

dec ::= varDeclaration:vd
         {: RESULT = vd; :}
      | funDeclaration:fd
         {:RESULT = fd; :}
      | funPrototype:fp
         {: RESULT = fp; :}
      ;

varDeclaration ::= typeSpecifier:ts ID:id SEMI
                     {: RESULT = new SimpleDec(tsleft, tsright, ts, id); :}
                 | typeSpecifier:ts ID:id LBRACKET NUM:n RBRACKET SEMI
                     {: RESULT = new ArrayDec(tsleft, tsright, ts, id, Integer.parseInt(n)); :}
                 ;

typeSpecifier ::= BOOL:b
                     {:RESULT = new NameTy(bleft, bright, b); :}
                | INT:i
                     {:RESULT = new NameTy(ileft, iright, i); :}
                | VOID:v
                     {:RESULT = new NameTy(vleft, vright, v); :}
                ;

funDeclaration ::= typeSpecifier:ts ID:id LPAREN params:ps RPAREN compoundStatement:cs
                     {: RESULT = new FunctionDec(tsleft, tsright, ts, id, ps, cs); :}
                 ;

funPrototype ::= typeSpecifier:ts ID:id LPAREN params:ps RPAREN SEMI
                     {: RESULT = new FunctionDec(tsleft, tsright, ts, id, ps, null); :}
               ;

params ::= paramList:pl
            {: RESULT = pl; :}
         | VOID:v
            {: RESULT = v; :}
         ;

paramList ::= paramList:pl COMMA param:p
            {: VarDecList t = pl;
               while ( t.tail != null )
                  t = t.tail;
               t.tail = new VarDecList(p, null); <----------------------- should this pass in pl or null?
               RESULT = pl;
            :}
            | param:p
               {: RESULT = new VarDecList(p, null); :}
            ;

param ::= typeSpecifier:ts ID:id
            {: RESULT = new SimpleDec(tsleft, tsright, ts, id); :}
        | typeSpecifier:ts ID:id LBRACKET RBRACKET
            {: RESULT = new ArrayDec(tsleft, tsright, ts, id, null):} <--------------------------- null? If so, ShowTreeVisitor.java should check for size != null
        ;

compoundStatement ::= LBRACE localDeclarations:ld statementList:sl RBRACE
                        {: RESULT = new CompoundExp(ldleft, ldright, ld, sl):}
                    ;

localDeclarations ::= localDeclarations:ld varDeclaration:vd
                        {: VarDecList t = ld;
                           while ( t.tail != null )
                              t = t.tail;
                           t.tail = new VarDecList(vd, null);
                           RESULT = ld; 
                        :}
                    ;

statementList ::= statementList:sl statement:s
                     {: ExpList t = s1;
                        while ( t.tail != null )
                           t = t.tail;
                        t.tail = new ExpList(s, null);
                        RESULT = s1;
                     :}
                ;

statement ::= expressionStatement:es
               {: Result = es; :}
            | compoundStatement:cs
               {: Result = cs; :}
            | selectionStatement:ss
               {: Result = ss; :}
            | iterationStatement:is
               {: Result = is; :}
            | returnStatement:rs
               {: Result = rs; :}
            ;

expressionStatement ::= expression:e SEMI
                           {: RESULT = e; :}
                      | SEMI:s
                           {: RESULT = s; :}
                      ;

selectionStatement ::= IF:i LPAREN expression:e RPAREN statement:s
                        {: RESULT = new IfExp(ileft, iright, e, s, null); :}
                     | IF:iff LPAREN expression:e RPAREN statement:s1 ELSE statement:s2
                        {: RESULT = new IfExp(ileft, iright, e, s1, s2); :}
                     ;

iterationStatement ::= WHILE:w LPAREN expression:e RPAREN statement:s
                        {: RESULT = new WhileExp(wleft, wright, e, s); :}
                     ;

returnStatement ::= RETURN:r expression:e SEMI
                     {: RESULT = new ReturnExp(rleft, rright, e); :}
                  | RETURN:r SEMI
                     {: RESULT = new ReturnExp(rleft, rright, null); :}
                  ;

var ::= ID:id
         {: RESULT = id; :}
      | ID:id LBRACKET expression:e RBRACKET
         {: RESULT = :}
      ;

expression ::= var:v ASSIGN expression:e
                {: RESULT = new AssignExp(vleft, vright, v, e); :}
            | expression:e1 PLUS expression:e2
                {: RESULT = new OpExp(e1left, e1right, e1, OpExp.PLUS, e2); :}
            | expression:e1 MINUS expression:t
                {: RESULT = new OpExp(e1left, e1right, e1, OpExp.MINUS, e2); :}
            | MINUS:m expression:e
                {: RESULT = new OpExp(mleft, mright, null, OpExp.UMINUS, e); :}
            | expression:e1 MUL expression:e2
                {: RESULT = new OpExp(e1left, e2right, e1, OpExp.MUL, e2); :}
            | expression:e1 DIV expression:e2
                {: RESULT = new OpExp(e1left, e1right, e1, OpExp.DIV, e2); :}
            | expression:e1 EQ expression:e2
                {: RESULT = new OpExp(e1left, e1right, e1, OpExp.EQ, e2); :}
            | expression:e1 NE expression:e2
                {: RESULT = new OpExp(e1left, e1right, e1, OpExp.NE, e2); :}
            | expression:e1 LT expression:e2
                {: RESULT = new OpExp(e1left, e1right, e1, OpExp.LT, e2); :}
            |  expression:e1 LE expression:e2
                {: RESULT = new OpExp(e1left, e1right, e1, OpExp.LE, e2); :}
            | expression:e1 GT expression:e2
                {: RESULT = new OpExp(e1left, e1right, e1, OpExp.GT, e2); :}
            | expression:e1 GE expression:e2
                {: RESULT = new OpExp(e1left, e1right, e1, OpExp.GE, e2); :}
            | TILDA:t expression:e
                {: RESULT = new OpExp(tleft, tright, null, OpExp.NOT, e); :}
            | expression:e1 AND expression:e2
                {: RESULT = new OpExp(e1left, e1right, e1, OpExp.AND, e2); :}
            |  expression:e1 OR expression:e2
                {: RESULT = new OpExp(e1left, e1right, e1, OpExp.OR, e2); :}
            | LPAREN expression:e RPAREN
                {: RESULT = e; :}
            | var:v
                {: RESULT = new VarExp(vleft, vright, v); :}
            | ID:id args:a
                {: RESULT = new CallExp(idleft, idright, id, a); :}
            | NUM:n
                {: RESULT = new IntExp(nleft, nright, Integer.parseInt(n)); :}
            | TRUTH:t
                {: RESULT = new BoolExp(tleft, tright, Boolean.parseBoolean(t)); :}
            ;

args ::= argList:al
            {: RESULT = al; :}
       |
       ;

argList ::= argList:al COMMA expression:e
               {: ExpList t = al;
                  while ( t.tail != null )
                     t = t.tail;
                  t.tail = new ExpList(e, null);
                  RESULT = al;
               :}
          | expression:e
               {: RESULT = e; :}
          ;

